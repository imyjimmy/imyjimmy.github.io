{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport matter from \"gray-matter\";\nimport fs from \"fs\";\nimport path from \"path\"; // Get day in format: Month day, Year. e.g. April 19, 2020\n\nfunction getFormattedDate(date) {\n  const options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  };\n  const formattedDate = date.toLocaleDateString(\"en-US\", options);\n  return formattedDate;\n}\n\nexport function getSortedPosts() {\n  // Get all posts located in `content/posts`\n  const files = fs.readdirSync(`${process.cwd()}/content/posts`);\n  const posts = files.map(filename => {\n    // Get raw content from file\n    const markdownWithMetadata = fs.readFileSync(`content/posts/${filename}`).toString(); // Parse markdown and get frontmatter data.\n\n    const {\n      data\n    } = matter(markdownWithMetadata);\n\n    const frontmatter = _objectSpread(_objectSpread({}, data), {}, {\n      date: getFormattedDate(data.date)\n    }); // Remove .md file extension from post name\n\n\n    const slug = filename.replace(\".md\", \"\");\n    return {\n      slug,\n      frontmatter\n    };\n  }).sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date));\n  return posts;\n}\nexport function getPostsSlugs() {\n  const files = fs.readdirSync(\"content/posts\");\n  const paths = files.map(filename => ({\n    params: {\n      slug: filename.replace(\".md\", \"\")\n    }\n  }));\n  return paths;\n}\nexport function getPostBySlug(slug) {\n  // Get raw content for post given a slug\n  const markdownWithMetadata = fs.readFileSync(path.join(\"content/posts\", slug + \".md\")).toString(); // Parse markdown, and get markdown's frontmatter and content.\n\n  const {\n    data,\n    content,\n    excerpt\n  } = matter(markdownWithMetadata);\n\n  const frontmatter = _objectSpread(_objectSpread({}, data), {}, {\n    date: getFormattedDate(data.date)\n  });\n\n  return {\n    frontmatter,\n    post: {\n      content,\n      excerpt\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jizhang/lance/imyjimmy.github.io/utils/posts.js"],"names":["matter","fs","path","getFormattedDate","date","options","year","month","day","formattedDate","toLocaleDateString","getSortedPosts","files","readdirSync","process","cwd","posts","map","filename","markdownWithMetadata","readFileSync","toString","data","frontmatter","slug","replace","sort","a","b","Date","getPostsSlugs","paths","params","getPostBySlug","join","content","excerpt","post"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AACA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,QAAMC,OAAO,GAAG;AAAEC,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,KAAK,EAAE,MAA1B;AAAkCC,IAAAA,GAAG,EAAE;AAAvC,GAAhB;AACA,QAAMC,aAAa,GAAGL,IAAI,CAACM,kBAAL,CAAwB,OAAxB,EAAiCL,OAAjC,CAAtB;AAEA,SAAOI,aAAP;AACD;;AAED,OAAO,SAASE,cAAT,GAA0B;AAC/B;AACA,QAAMC,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAgB,GAAEC,OAAO,CAACC,GAAR,EAAc,gBAAhC,CAAd;AAEA,QAAMC,KAAK,GAAGJ,KAAK,CAChBK,GADW,CACNC,QAAD,IAAc;AACjB;AACA,UAAMC,oBAAoB,GAAGlB,EAAE,CAC5BmB,YAD0B,CACZ,iBAAgBF,QAAS,EADb,EAE1BG,QAF0B,EAA7B,CAFiB,CAMjB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWtB,MAAM,CAACmB,oBAAD,CAAvB;;AAEA,UAAMI,WAAW,mCACZD,IADY;AAEflB,MAAAA,IAAI,EAAED,gBAAgB,CAACmB,IAAI,CAAClB,IAAN;AAFP,MAAjB,CATiB,CAcjB;;;AACA,UAAMoB,IAAI,GAAGN,QAAQ,CAACO,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAb;AAEA,WAAO;AACLD,MAAAA,IADK;AAELD,MAAAA;AAFK,KAAP;AAID,GAtBW,EAuBXG,IAvBW,CAwBV,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASD,CAAC,CAACL,WAAF,CAAcnB,IAAvB,IAA+B,IAAIyB,IAAJ,CAASF,CAAC,CAACJ,WAAF,CAAcnB,IAAvB,CAxB/B,CAAd;AA2BA,SAAOY,KAAP;AACD;AAED,OAAO,SAASc,aAAT,GAAyB;AAC9B,QAAMlB,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAe,eAAf,CAAd;AAEA,QAAMkB,KAAK,GAAGnB,KAAK,CAACK,GAAN,CAAWC,QAAD,KAAe;AACrCc,IAAAA,MAAM,EAAE;AACNR,MAAAA,IAAI,EAAEN,QAAQ,CAACO,OAAT,CAAiB,KAAjB,EAAwB,EAAxB;AADA;AAD6B,GAAf,CAAV,CAAd;AAMA,SAAOM,KAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBT,IAAvB,EAA6B;AAClC;AACA,QAAML,oBAAoB,GAAGlB,EAAE,CAC5BmB,YAD0B,CACblB,IAAI,CAACgC,IAAL,CAAU,eAAV,EAA2BV,IAAI,GAAG,KAAlC,CADa,EAE1BH,QAF0B,EAA7B,CAFkC,CAMlC;;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQa,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA6BpC,MAAM,CAACmB,oBAAD,CAAzC;;AAEA,QAAMI,WAAW,mCACZD,IADY;AAEflB,IAAAA,IAAI,EAAED,gBAAgB,CAACmB,IAAI,CAAClB,IAAN;AAFP,IAAjB;;AAKA,SAAO;AAAEmB,IAAAA,WAAF;AAAec,IAAAA,IAAI,EAAE;AAAEF,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAArB,GAAP;AACD","sourcesContent":["import matter from \"gray-matter\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n// Get day in format: Month day, Year. e.g. April 19, 2020\nfunction getFormattedDate(date) {\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  const formattedDate = date.toLocaleDateString(\"en-US\", options);\n\n  return formattedDate;\n}\n\nexport function getSortedPosts() {\n  // Get all posts located in `content/posts`\n  const files = fs.readdirSync(`${process.cwd()}/content/posts`);\n\n  const posts = files\n    .map((filename) => {\n      // Get raw content from file\n      const markdownWithMetadata = fs\n        .readFileSync(`content/posts/${filename}`)\n        .toString();\n\n      // Parse markdown and get frontmatter data.\n      const { data } = matter(markdownWithMetadata);\n\n      const frontmatter = {\n        ...data,\n        date: getFormattedDate(data.date),\n      };\n\n      // Remove .md file extension from post name\n      const slug = filename.replace(\".md\", \"\");\n\n      return {\n        slug,\n        frontmatter,\n      };\n    })\n    .sort(\n      (a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date)\n    );\n\n  return posts;\n}\n\nexport function getPostsSlugs() {\n  const files = fs.readdirSync(\"content/posts\");\n\n  const paths = files.map((filename) => ({\n    params: {\n      slug: filename.replace(\".md\", \"\"),\n    },\n  }));\n\n  return paths;\n}\n\nexport function getPostBySlug(slug) {\n  // Get raw content for post given a slug\n  const markdownWithMetadata = fs\n    .readFileSync(path.join(\"content/posts\", slug + \".md\"))\n    .toString();\n\n  // Parse markdown, and get markdown's frontmatter and content.\n  const { data, content, excerpt } = matter(markdownWithMetadata);\n\n  const frontmatter = {\n    ...data,\n    date: getFormattedDate(data.date),\n  };\n\n  return { frontmatter, post: { content, excerpt } };\n}\n"]},"metadata":{},"sourceType":"module"}